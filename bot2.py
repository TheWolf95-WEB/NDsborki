# –ó–∞–ø—É—Å–∫ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –ø–æ—Å–ª–µ run_polling
async def on_startup(app):
    if os.path.exists("restart_message.txt"):
        with open("restart_message.txt", "r") as f:
            user_id = int(f.read().strip())
        try:
            menu = [['üìã –°–±–æ—Ä–∫–∏ Warzone']]
            markup = ReplyKeyboardMarkup(menu, resize_keyboard=True)
            await app.bot.send_message(
                chat_id=user_id,
                text="‚úÖ –ë–æ—Ç —É—Å–ø–µ—à–Ω–æ –ø–µ—Ä–µ–∑–∞–ø—É—â–µ–Ω. –í–æ–∑–≤—Ä–∞—â–∞—é—Å—å –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é...",
                reply_markup=markup,
                parse_mode="HTML"
            )
        except Exception:
            logging.exception("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ—Å–ª–µ —Ä–µ—Å—Ç–∞—Ä—Ç–∞")
        os.remove("restart_message.txt")

import asyncio
import sys
import subprocess
import logging
import os
from dotenv import load_dotenv
load_dotenv()
from logging.handlers import RotatingFileHandler
from collections import Counter
from datetime import datetime

# –£—Å—Ç–∞–Ω–æ–≤–∫–∞ –∞–±—Å–æ–ª—é—Ç–Ω–æ–≥–æ –ø—É—Ç–∏ –∫ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏ –ø—Ä–æ–µ–∫—Ç–∞
BASE_DIR = os.path.dirname(os.path.abspath(__file__))
os.chdir(BASE_DIR)

# === –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ ===
os.makedirs("logs", exist_ok=True)

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è INFO –∏ –≤—ã—à–µ —Å —Ä–æ—Ç–∞—Ü–∏–µ–π
info_handler = RotatingFileHandler("logs/info.log", maxBytes=1_000_000, backupCount=3, encoding="utf-8")
info_handler.setLevel(logging.INFO)
info_handler.addFilter(lambda record: record.levelno < logging.WARNING)

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è WARNING –∏ –≤—ã—à–µ —Å —Ä–æ—Ç–∞—Ü–∏–µ–π
error_handler = RotatingFileHandler("logs/error.log", maxBytes=1_000_000, backupCount=3, encoding="utf-8")
error_handler.setLevel(logging.WARNING)

logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s - %(levelname)s - %(message)s',
    handlers=[info_handler, error_handler]  # –ë–µ–∑ StreamHandler
)


# === –ò–º–ø–æ—Ä—Ç—ã –∏ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è ===
from telegram import Update, ReplyKeyboardMarkup, ReplyKeyboardRemove, InputFile, InlineKeyboardMarkup, InlineKeyboardButton
from telegram.ext import ApplicationBuilder, CommandHandler, MessageHandler, ContextTypes, filters, ConversationHandler, CallbackQueryHandler
import json

# === –ö–æ–Ω—Å—Ç–∞–Ω—Ç—ã ===
TOKEN = os.getenv("BOT_TOKEN")
ALLOWED_USERS = list(map(int, os.getenv("ALLOWED_USERS", "").split(",")))
ADMIN_ID = int(os.getenv("ADMIN_ID"))
DB_PATH = 'database/builds.json'


# –≠—Ç–∞–ø—ã –¥–∏–∞–ª–æ–≥–∞ –¥–ª—è ConversationHandler
(WEAPON_NAME, ROLE_INPUT, CATEGORY_SELECT, VIEW_CATEGORY_SELECT, MODE_SELECT, TYPE_CHOICE, MODULE_COUNT, MODULE_SELECT, IMAGE_UPLOAD, CONFIRMATION,
 VIEW_WEAPON, VIEW_SET_COUNT, VIEW_DISPLAY, POST_CONFIRM) = range(14)


# === –£—Ç–∏–ª–∏—Ç–∞ –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –∫–Ω–æ–ø–∫–∏ –≥–ª–∞–≤–Ω–æ–≥–æ –º–µ–Ω—é ===
def build_keyboard_with_main(buttons: list[list[str]]) -> ReplyKeyboardMarkup:
    if not any("üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é" in row for row in buttons):
        buttons.append(["üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é"])
    return ReplyKeyboardMarkup(buttons, resize_keyboard=True)

def admin_only(func):
    async def wrapper(update: Update, context: ContextTypes.DEFAULT_TYPE):
        user_id = update.effective_user.id
        if str(user_id) not in os.getenv("ALLOWED_USERS", "").split(","):
            await update.message.reply_text("‚ùå –£ —Ç–µ–±—è –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥—ã.")
            return
        return await func(update, context)
    return wrapper


# === –ö–æ–º–∞–Ω–¥–∞ /start, –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é ===
async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    print("üî• –ù–æ–≤—ã–π –∫–æ–¥ –∑–∞–≥—Ä—É–∂–µ–Ω —Å GitHub")
    user_id = update.effective_user.id
    menu = get_main_menu(user_id)

    if user_id in ALLOWED_USERS:
        text = "–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ NDsborki BOT"
        text += "\n\nüõ† –ê–¥–º–∏–Ω: –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—É /add –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è —Å–±–æ—Ä–æ–∫."
    else:
        text = (
            "üëã <b>–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ NDsborki BOT!</b>\n\n"
            "–ó–¥–µ—Å—å —Ç—ã –º–æ–∂–µ—à—å:\n"
            " ‚Ä¢ –°–º–æ—Ç—Ä–µ—Ç—å —Å–±–æ—Ä–∫–∏ –æ—Ä—É–∂–∏—è –∏–∑ Warzone\n"
            " ‚Ä¢ –í—ã–±–∏—Ä–∞—Ç—å —Ç–∏–ø –∏ –∫–æ–ª-–≤–æ –º–æ–¥—É–ª–µ–π –¥–ª—è —Ñ–∏–ª—å—Ç—Ä–∞\n"
            " ‚Ä¢ –õ–∏—Å—Ç–∞—Ç—å –ø–æ–¥—Ö–æ–¥—è—â–∏–µ –≤–∞—Ä–∏–∞–Ω—Ç—ã —Å —Ñ–æ—Ç–æ –∏ –∞–≤—Ç–æ—Ä–æ–º\n\n"
            "üìç –ñ–º–∏ <b>¬´–°–±–æ—Ä–∫–∏ Warzone¬ª</b>, —á—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å!\n\n"
            "‚ö†Ô∏è –î–æ–±–∞–≤–ª–µ–Ω–∏–µ —Å–±–æ—Ä–æ–∫ –¥–æ—Å—Ç—É–ø–Ω–æ —Ç–æ–ª—å–∫–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞–º.\n\n"
            "üí¨ –ï—Å–ª–∏ –µ—Å—Ç—å –∏–¥–µ–∏ –∏–ª–∏ –Ω–∞—à—ë–ª –±–∞–≥ ‚Äî –ø–∏—à–∏ @nd_admin95\n\n"
            "üõ† –ë–æ—Ç –±—É–¥–µ—Ç –ø–æ—Å—Ç–æ—è–Ω–Ω–æ –æ–±–Ω–æ–≤–ª—è—Ç—å—Å—è –∏ —É–ª—É—á—à–∞—Ç—å—Å—è!!"
        )

    await update.message.reply_text(text, reply_markup=menu, parse_mode="HTML")



# === —É–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã === 
def get_main_menu(user_id: int) -> ReplyKeyboardMarkup:
    return ReplyKeyboardMarkup([['üìã –°–±–æ—Ä–∫–∏ Warzone']], resize_keyboard=True)



@admin_only
async def check_files(update: Update, context: ContextTypes.DEFAULT_TYPE):
    import os

    file_map = {
        "assault": "modules-assault.json",
        "battle": "modules-battle.json",
        "smg": "modules-pp.json",
        "shotgun": "modules-drobovik.json",
        "marksman": "modules-pehotnay.json",
        "lmg": "modules-pulemet.json",
        "sniper": "modules-snayperki.json",
        "pistol": "modules-pistolet.json",
        "special": "modules-osoboe.json"
    }

    msg_lines = ["üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ñ–∞–π–ª–æ–≤ –≤ /database:"]
    for key, fname in file_map.items():
        path = f"database/{fname}"
        if os.path.exists(path):
            msg_lines.append(f"‚úÖ {key}: <code>{fname}</code> ‚Äî –Ω–∞–π–¥–µ–Ω")
        else:
            msg_lines.append(f"‚ùå {key}: <code>{fname}</code> ‚Äî –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç")

    await update.message.reply_text("\n".join(msg_lines), parse_mode="HTML")




# === –ü—Ä–æ—Å–º–æ—Ç—Ä —Å–±–æ—Ä–æ–∫ –ø–æ —à–∞–≥–∞–º ===
async def show_all_builds(update: Update, context: ContextTypes.DEFAULT_TYPE):
    with open(DB_PATH, 'r') as f:
        data = json.load(f)
    types = sorted(set(b['type'] for b in data if b['mode'].lower() == 'warzone'))
    if not types:
        await update.message.reply_text("–°–±–æ—Ä–æ–∫ Warzone –ø–æ–∫–∞ –Ω–µ—Ç.")
        return ConversationHandler.END
    buttons = [[t] for t in types]
    await update.message.reply_text("–í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø –æ—Ä—É–∂–∏—è:", reply_markup=ReplyKeyboardMarkup(buttons, resize_keyboard=True))
    return VIEW_WEAPON

# –ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Å–ø–∏—Å–æ–∫ –æ—Ä—É–∂–∏—è –≤—ã–±—Ä–∞–Ω–Ω–æ–≥–æ —Ç–∏–ø–∞
async def view_select_weapon(update: Update, context: ContextTypes.DEFAULT_TYPE):
    context.user_data['selected_type'] = update.message.text
    with open(DB_PATH, 'r') as f:
        data = json.load(f)
    weapons = sorted(set(b['weapon_name'] for b in data if b['type'] == context.user_data['selected_type'] and b.get('category') == context.user_data.get('selected_category')))
    if not weapons:
        await update.message.reply_text("–°–±–æ—Ä–æ–∫ –ø–æ —ç—Ç–æ–º—É —Ç–∏–ø—É –ø–æ–∫–∞ –Ω–µ—Ç.")
        return ConversationHandler.END
    buttons = [[w] for w in weapons]

    # üü¢ –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤—ã–±—Ä–∞–Ω–Ω–æ–µ –æ—Ä—É–∂–∏–µ –¥–ª—è –¥–∞–ª—å–Ω–µ–π—à–∏—Ö —à–∞–≥–æ–≤
    context.user_data['available_weapons'] = weapons

    await update.message.reply_text("–í—ã–±–µ—Ä–∏—Ç–µ –æ—Ä—É–∂–∏–µ:", reply_markup=ReplyKeyboardMarkup(buttons, resize_keyboard=True))
    return VIEW_SET_COUNT

# –ü—Ä–æ—Å–∏—Ç –≤—ã–±—Ä–∞—Ç—å –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –º–æ–¥—É–ª–µ–π (5 –∏–ª–∏ 8), —Å —É–∫–∞–∑–∞–Ω–∏–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö —Å–±–æ—Ä–æ–∫
# –ü—Ä–æ—Å–∏—Ç –≤—ã–±—Ä–∞—Ç—å –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –º–æ–¥—É–ª–µ–π (5 –∏–ª–∏ 8), —Å —É–∫–∞–∑–∞–Ω–∏–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö —Å–±–æ—Ä–æ–∫
async def view_set_count(update: Update, context: ContextTypes.DEFAULT_TYPE):
    context.user_data['selected_weapon'] = update.message.text  # ‚úÖ —Ñ–∏–∫—Å: —Å–æ—Ö—Ä–∞–Ω—è–µ–º –≤—ã–±—Ä–∞–Ω–Ω–æ–µ –æ—Ä—É–∂–∏–µ
    context.user_data['selected_category'] = context.user_data.get('selected_category')

    # –ó–∞–≥—Ä—É–∂–∞–µ–º —Å–±–æ—Ä–∫–∏ –∏–∑ –ë–î
    with open(DB_PATH, 'r') as f:
        builds = json.load(f)

    # –°—á–∏—Ç–∞–µ–º, —Å–∫–æ–ª—å–∫–æ —Å–±–æ—Ä–æ–∫ —Å 5 –∏ 8 –º–æ–¥—É–ª—è–º–∏
    count_5 = sum(1 for b in builds if b['weapon_name'] == context.user_data['selected_weapon']
                                      and b['type'] == context.user_data['selected_type']
                                      and len(b['modules']) == 5)
    count_8 = sum(1 for b in builds if b['weapon_name'] == context.user_data['selected_weapon']
                                      and b['type'] == context.user_data['selected_type']
                                      and len(b['modules']) == 8)

    # –û–±–Ω–æ–≤–ª—è–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ–º
    keyboard = [[f"5 ({count_5})"], [f"8 ({count_8})"]]
    await update.message.reply_text("–í—ã–±–µ—Ä–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –º–æ–¥—É–ª–µ–π:", reply_markup=ReplyKeyboardMarkup(keyboard, resize_keyboard=True))

    return VIEW_DISPLAY


# === –§–∏–ª—å—Ç—Ä—É–µ—Ç —Å–±–æ—Ä–∫–∏ –ø–æ —Ç–∏–ø—É, –æ—Ä—É–∂–∏—é –∏ –∫–æ–ª–∏—á–µ—Å—Ç–≤—É –º–æ–¥—É–ª–µ–π ===
# –ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –ø–µ—Ä–≤—É—é –ø–æ–¥—Ö–æ–¥—è—â—É—é —Å–±–æ—Ä–∫—É
async def view_display_builds(update: Update, context: ContextTypes.DEFAULT_TYPE):
    raw_text = update.message.text
    count_str = raw_text.split()[0]  # –ë–µ—Ä—ë—Ç "5" –∏–∑ "5 (0)" –∏ —Ç.–¥.
    try:
        count = int(count_str)
    except ValueError:
        await update.message.reply_text("‚ö†Ô∏è –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –º–æ–¥—É–ª–µ–π —Å –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã.")
        return VIEW_DISPLAY

    context.user_data['selected_count'] = count

    with open(DB_PATH, 'r') as f:
        builds = json.load(f)

    filtered = [
       b for b in builds
       if b['type'] == context.user_data['selected_type'] and
       b['weapon_name'] == context.user_data['selected_weapon'] and
       len(b['modules']) == count and
       b.get('category') == context.user_data.get('selected_category')
     ]



    if not filtered:
        context.user_data.pop('selected_count', None)
        # –æ–±–Ω–æ–≤–ª—ë–Ω–Ω—ã–π –ø–µ—Ä–µ—Å—á—ë—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö —Å–±–æ—Ä–æ–∫
        count_5 = sum(1 for b in builds if b['weapon_name'] == context.user_data['selected_weapon'] and b['type'] == context.user_data['selected_type'] and len(b['modules']) == 5)
        count_8 = sum(1 for b in builds if b['weapon_name'] == context.user_data['selected_weapon'] and b['type'] == context.user_data['selected_type'] and len(b['modules']) == 8)
        keyboard = [[f"5 ({count_5})"], [f"8 ({count_8})"]]
        await update.message.reply_text(
            "‚ùå –ü–æ–¥—Ö–æ–¥—è—â–∏—Ö —Å–±–æ—Ä–æ–∫ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ.\n\n–í—ã–±–µ—Ä–∏—Ç–µ –¥—Ä—É–≥–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –º–æ–¥—É–ª–µ–π:",
            reply_markup=ReplyKeyboardMarkup(keyboard, resize_keyboard=True)
        )
        return VIEW_DISPLAY

    context.user_data['viewed_builds'] = filtered
    context.user_data['current_index'] = 0
    return await send_build(update, context)



# –ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Ç–µ–∫—É—â—É—é —Å–±–æ—Ä–∫—É (—Å —Ñ–æ—Ç–æ –∏ –Ω–∞–≤–∏–≥–∞—Ü–∏–µ–π)
async def send_build(update: Update, context: ContextTypes.DEFAULT_TYPE):
    idx = context.user_data['current_index']
    build = context.user_data['viewed_builds'][idx]

    # –í–Ω–µ—à–Ω–∏–π –≤–∏–¥ –≤—ã–≤–æ–¥–∞ —Å–±–æ—Ä–∫–∏ (–ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∞—è —á–∞—Å—Ç—å)
    # –ó–∞–≥—Ä—É–∂–∞–µ–º —Å–ª–æ–≤–∞—Ä—å –ø–µ—Ä–µ–≤–æ–¥–æ–≤ EN ‚Üí RU
    translation = load_translation_dict(build['type'])

    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å–±–æ—Ä–∫—É, –ø–µ—Ä–µ–≤–æ–¥—è –∑–Ω–∞—á–µ–Ω–∏—è –º–æ–¥—É–ª–µ–π
    modules_text = "\n".join(
        f"‚îú {k}: {translation.get(v, v)}"
        for k, v in build['modules'].items()
    )

    caption = (
        f"–û—Ä—É–∂–∏–µ: {build['weapon_name']}\n"
        f"–î–∏—Å—Ç–∞–Ω—Ü–∏—è: {build.get('role', '-')}\n"
        f"–¢–∏–ø: {build['type']}\n\n"
        f"–ú–æ–¥—É–ª–∏: {len(build['modules'])}\n"
        f"{modules_text}\n\n"
        f"–ê–≤—Ç–æ—Ä: {build['author']}"
    )



    nav = []
    nav_row = []
    if idx > 0:
        nav_row.append("‚¨Ö –ü—Ä–µ–¥—ã–¥—É—â–∞—è")
    if idx < len(context.user_data['viewed_builds']) - 1:
        nav_row.append("‚û° –°–ª–µ–¥—É—é—â–∞—è")
    if nav_row:
        nav.append(nav_row)
    nav.append(["üìã –°–±–æ—Ä–∫–∏ Warzone"])
    markup = ReplyKeyboardMarkup(nav, resize_keyboard=True)

    if os.path.exists(build['image']):
        with open(build['image'], 'rb') as img:
            await update.message.reply_photo(photo=InputFile(img), caption=caption, reply_markup=markup, parse_mode="HTML")
    else:
        await update.message.reply_text(caption, reply_markup=markup, parse_mode="HTML")
    return VIEW_DISPLAY

# –ü–µ—Ä–µ—Ö–æ–¥ –∫ —Å–ª–µ–¥—É—é—â–µ–π —Å–±–æ—Ä–∫–µ
async def next_build(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if context.user_data['current_index'] < len(context.user_data['viewed_builds']) - 1:
        context.user_data['current_index'] += 1
        return await send_build(update, context)

# –ü–µ—Ä–µ—Ö–æ–¥ –∫ –ø—Ä–µ–¥—ã–¥—É—â–µ–π —Å–±–æ—Ä–∫–µ
async def previous_build(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if context.user_data['current_index'] > 0:
        context.user_data['current_index'] -= 1
        return await send_build(update, context)

# === –ê–¥–º–∏–Ω—Å–∫–∞—è —á–∞—Å—Ç—å ===
async def add_start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if update.effective_user.id not in ALLOWED_USERS:
        await update.message.reply_text("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è.")
        await start(update, context)
        return ConversationHandler.END

    await update.message.reply_text(
        "üõ† <b>–†–µ–∂–∏–º –¥–æ–±–∞–≤–ª–µ–Ω–∏—è —Å–±–æ—Ä–æ–∫ –≤–∫–ª—é—á—ë–Ω</b>\n\n"
        "üìå –°–ª–µ–¥—É–π—Ç–µ –ø–æ—à–∞–≥–æ–≤—ã–º –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏—è–º, —á—Ç–æ–±—ã –¥–æ–±–∞–≤–∏—Ç—å –Ω–æ–≤—É—é —Å–±–æ—Ä–∫—É.\n"
        "–í—ã –º–æ–∂–µ—Ç–µ –≤ –ª—é–±–æ–π –º–æ–º–µ–Ω—Ç –≤–≤–µ—Å—Ç–∏ <code>/cancel</code>, —á—Ç–æ–±—ã –≤—ã–π—Ç–∏.",
        parse_mode="HTML"
    )

    await update.message.reply_text("–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –æ—Ä—É–∂–∏—è:", reply_markup=ReplyKeyboardRemove())
    return WEAPON_NAME


# –ó–∞–ø—Ä–∞—à–∏–≤–∞–µ—Ç –Ω–∞–∑–≤–∞–Ω–∏–µ –æ—Ä—É–∂–∏—è –∏ –î–∏—Å—Ç–∞–Ω—Ü–∏—è 
async def get_weapon_name(update: Update, context: ContextTypes.DEFAULT_TYPE):
    context.user_data['weapon'] = update.message.text
    await update.message.reply_text("–¢–µ–ø–µ—Ä—å –≤–≤–µ–¥–∏—Ç–µ –î–∏—Å—Ç–∞–Ω—Ü–∏—é –æ—Ä—É–∂–∏—è")
    return ROLE_INPUT

async def get_weapon_role(update: Update, context: ContextTypes.DEFAULT_TYPE):
    context.user_data['role'] = update.message.text
    buttons = [["–¢–æ–ø–æ–≤–∞—è –º–µ—Ç–∞"], ["–ú–µ—Ç–∞"], ["–ù–æ–≤–∏–Ω–∫–∏"]]
    await update.message.reply_text("–í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é —Å–±–æ—Ä–∫–∏:", reply_markup=ReplyKeyboardMarkup(buttons, resize_keyboard=True))
    return CATEGORY_SELECT

# –Ω–æ–≤—ã–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤—ã–±–æ—Ä–∞ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏–∏ –∏ —Ä–µ–∂–∏–º–∞ConversationHandle
async def get_category(update: Update, context: ContextTypes.DEFAULT_TYPE):
    context.user_data['category'] = update.message.text
    await update.message.reply_text("–í—ã–±–µ—Ä–∏—Ç–µ —Ä–µ–∂–∏–º:", reply_markup=ReplyKeyboardMarkup([["Warzone"]], resize_keyboard=True))
    return MODE_SELECT


# –ó–∞–ø—Ä–∞—à–∏–≤–∞–µ—Ç —Ç–∏–ø –æ—Ä—É–∂–∏—è
async def get_mode(update: Update, context: ContextTypes.DEFAULT_TYPE):
    context.user_data['mode'] = update.message.text
    weapon_types = load_weapon_types()

    # –ò–∑–≤–ª–µ–∫–∞–µ–º label‚Äô—ã (–Ω–∞–∑–≤–∞–Ω–∏—è –¥–ª—è –∫–Ω–æ–ø–æ–∫)
    labels = [item["label"] for item in weapon_types]

    # –≥—Ä—É–ø–ø–∏—Ä—É–µ–º –ø–æ 2 –∫–Ω–æ–ø–∫–∏ –≤ —Å—Ç—Ä–æ–∫—É
    buttons = [labels[i:i+2] for i in range(0, len(labels), 2)]

    await update.message.reply_text("–í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø –æ—Ä—É–∂–∏—è:", reply_markup=ReplyKeyboardMarkup(buttons, resize_keyboard=True))
    return TYPE_CHOICE


# === –§—É–Ω–∫—Ü–∏—è –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏ —Ç–∏–ø–æ–≤ === 
def load_weapon_types():
    with open("database/types.json", "r", encoding="utf-8") as f:
        return json.load(f)


# === –í—ã–±–æ—Ä –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –º–æ–¥—É–ª–µ–π (–ø–æ key) ===
async def get_type(update: Update, context: ContextTypes.DEFAULT_TYPE):
    selected_label = update.message.text.strip()
    weapon_types = load_weapon_types()

    # –ú–∞–ø–∞: label ‚Üí key
    label_to_key = {item["label"]: item["key"] for item in weapon_types}
    selected_key = label_to_key.get(selected_label)

    # –õ–æ–≥–∏—Ä—É–µ–º, —á—Ç–æ –≤–≤—ë–ª –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å
    logging.info(f"[get_type] –í–≤–µ–¥—ë–Ω label: {selected_label!r}")

    # –õ–æ–≥–∏—Ä—É–µ–º –≤—Å–µ –¥–æ—Å—Ç—É–ø–Ω—ã–µ –≤–∞—Ä–∏–∞–Ω—Ç—ã
    logging.info("[get_type] –í—Å–µ –¥–æ—Å—Ç—É–ø–Ω—ã–µ label ‚Üí key:")
    for label, key in label_to_key.items():
        logging.info(f" - {label!r} ‚Üí {key}")

    if not selected_key:
        await update.message.reply_text("‚ùå –¢–∏–ø –æ—Ä—É–∂–∏—è –Ω–µ —Ä–∞—Å–ø–æ–∑–Ω–∞–Ω. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –∏–∑ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–Ω—ã—Ö –∫–Ω–æ–ø–æ–∫.")
        return TYPE_CHOICE

    context.user_data['type'] = selected_key

    file_map = {
        "assault": "modules-assault.json",
        "battle": "modules-battle.json",
        "smg": "modules-pp.json",
        "shotgun": "modules-drobovik.json",
        "marksman": "modules-pehotnay.json",
        "lmg": "modules-pulemet.json",
        "sniper": "modules-snayperki.json",
        "pistol": "modules-pistolet.json",
        "special": "modules-osoboe.json"
    }

    filename = file_map.get(selected_key)
    if not filename:
        await update.message.reply_text("‚ùå –î–ª—è –≤—ã–±—Ä–∞–Ω–Ω–æ–≥–æ —Ç–∏–ø–∞ –æ—Ä—É–∂–∏—è –º–æ–¥—É–ª–∏ –ø–æ–∫–∞ –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω—ã.")
        return ConversationHandler.END

    try:
        with open(f"database/{filename}", "r", encoding="utf-8") as f:
            module_data = json.load(f)
    except Exception as e:
        logging.exception(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ —Ñ–∞–π–ª–∞ {filename}")
        await update.message.reply_text(f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –º–æ–¥—É–ª–∏ –¥–ª—è {selected_label}.\n–û—à–∏–±–∫–∞: {e}")
        return ConversationHandler.END

    context.user_data['module_variants'] = module_data
    context.user_data['module_options'] = list(module_data.keys())

    await update.message.reply_text(
        "–°–∫–æ–ª—å–∫–æ –º–æ–¥—É–ª–µ–π:",
        reply_markup=ReplyKeyboardMarkup([["5"], ["8"]], resize_keyboard=True)
    )
    return MODULE_COUNT




# –ó–∞–ø—Ä–∞—à–∏–≤–∞–µ—Ç –≤—ã–±–æ—Ä –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –º–æ–¥—É–ª–µ–π (5 –∏–ª–∏ 8)
async def get_module_count(update: Update, context: ContextTypes.DEFAULT_TYPE):
    context.user_data['module_count'] = int(update.message.text)
    context.user_data['selected_modules'] = []
    context.user_data['detailed_modules'] = {}
    buttons = [context.user_data['module_options'][i:i+2] for i in range(0, len(context.user_data['module_options']), 2)]
    await update.message.reply_text("–í—ã–±–µ—Ä–∏—Ç–µ –º–æ–¥—É–ª—å:", reply_markup=ReplyKeyboardMarkup(buttons, resize_keyboard=True))
    return MODULE_SELECT

# === –û–±—Ä–∞–±–æ—Ç—á–∏–∫ inline-–∫–Ω–æ–ø–æ–∫ ===
async def module_variant_callback(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()
    if 'current_module' not in context.user_data:
        await query.message.reply_text("‚ö†Ô∏è –û—à–∏–±–∫–∞: –º–æ–¥—É–ª—å –Ω–µ –≤—ã–±—Ä–∞–Ω.")
        return MODULE_SELECT
    variant = query.data
    current_module = context.user_data['current_module']
    context.user_data['detailed_modules'][current_module] = variant

    if current_module not in context.user_data['selected_modules']:
        context.user_data['selected_modules'].append(current_module)

    await query.message.reply_text(f"‚úÖ {current_module}: {variant}")

    # –ü—Ä–æ–≤–µ—Ä–∫–∞: –≤—ã–±—Ä–∞–Ω–æ –ª–∏ –Ω—É–∂–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –º–æ–¥—É–ª–µ–π
    if len(context.user_data['selected_modules']) >= context.user_data['module_count']:
        await query.edit_message_reply_markup(reply_markup=None)
        context.user_data.pop('current_module', None)  # –°–±—Ä–æ—Å–∏–º —Ç–µ–∫—É—â–∏–π –º–æ–¥—É–ª—å
        context.user_data['waiting_image'] = True
        logging.info("‚úÖ –í—Å–µ –º–æ–¥—É–ª–∏ –≤—ã–±—Ä–∞–Ω—ã, –ø–µ—Ä–µ—Ö–æ–¥–∏–º –∫ –∑–∞–≥—Ä—É–∑–∫–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è.")
        await query.message.reply_text(
            "üì∑ –í—Å–µ –º–æ–¥—É–ª–∏ –≤—ã–±—Ä–∞–Ω—ã.\n–¢–µ–ø–µ—Ä—å –ø—Ä–∏–∫—Ä–µ–ø–∏—Ç–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Å–±–æ—Ä–∫–∏ (—Ñ–æ—Ç–æ –∏–ª–∏ —Ñ–∞–π–ª):",
            reply_markup=ReplyKeyboardRemove()
        )
        return IMAGE_UPLOAD

    # –ï—Å–ª–∏ –Ω–µ –≤—Å–µ –º–æ–¥—É–ª–∏ –≤—ã–±—Ä–∞–Ω—ã ‚Äî –ø—Ä–µ–¥–ª–∞–≥–∞–µ–º –≤—ã–±—Ä–∞—Ç—å —Å–ª–µ–¥—É—é—â–∏–π
    remaining = [m for m in context.user_data['module_options'] if m not in context.user_data['selected_modules']]
    buttons = [remaining[i:i+2] for i in range(0, len(remaining), 2)]
    context.user_data['current_module'] = None
    await query.edit_message_reply_markup(reply_markup=None)
    await query.message.reply_text("–í—ã–±–µ—Ä–∏—Ç–µ —Å–ª–µ–¥—É—é—â–∏–π –º–æ–¥—É–ª—å:", reply_markup=ReplyKeyboardMarkup(buttons, resize_keyboard=True))
    return MODULE_SELECT


# === –í—ã–±–æ—Ä –º–æ–¥—É–ª—è —á–µ—Ä–µ–∑ –æ–±—ã—á–Ω—ã–µ –∫–Ω–æ–ø–∫–∏, –≤–∞—Ä–∏–∞–Ω—Ç—ã ‚Äî inline ===
async def select_modules(update: Update, context: ContextTypes.DEFAULT_TYPE):
    module = update.message.text
    if module not in context.user_data['module_options'] or module in context.user_data['selected_modules']:
        await update.message.reply_text("–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –∏–ª–∏ —É–∂–µ –≤—ã–±—Ä–∞–Ω–Ω—ã–π –º–æ–¥—É–ª—å.")
        return MODULE_SELECT

    context.user_data['current_module'] = module
    variants = context.user_data['module_variants'].get(module, [])

    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –ø–µ—Ä–µ–≤–æ–¥ EN ‚Üí RU
    context.user_data['variant_translation'] = {
        v['en']: v['ru'] for v in variants
    }

    keyboard = [[InlineKeyboardButton(v['en'], callback_data=v['en'])] for v in variants]

    await update.message.reply_text(
        f"–í—ã–±–µ—Ä–∏—Ç–µ –≤–∞—Ä–∏–∞–Ω—Ç –¥–ª—è {module}:",
        reply_markup=InlineKeyboardMarkup(keyboard)
    )
    return MODULE_SELECT

# ‚¨áÔ∏è –í—Å—Ç–∞–≤–∏—Ç—å –∑–¥–µ—Å—å
async def reject_early_image(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text("‚ùó –°–Ω–∞—á–∞–ª–∞ –≤—ã–±–µ—Ä–∏—Ç–µ –≤—Å–µ –º–æ–¥—É–ª–∏. –ü–æ—Ç–æ–º –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ.")
    return MODULE_SELECT

# === –ó–∞–≥—Ä—É–∑–∫–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è ===

async def handle_image(update: Update, context: ContextTypes.DEFAULT_TYPE):
    logging.info("üì• –û–±—Ä–∞–±–æ—Ç–∫–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –Ω–∞—á–∞–ª–∞—Å—å...")

    file = None

    if update.message.photo:
        logging.info("üì∑ –ü–æ–ª—É—á–µ–Ω–æ —Å–∂–∞—Ç–æ–µ —Ñ–æ—Ç–æ")
        file = await update.message.photo[-1].get_file()
    elif update.message.document and update.message.document.mime_type.startswith("image/"):
        logging.info("üñºÔ∏è –ü–æ–ª—É—á–µ–Ω –Ω–µ—Å–∂–∞—Ç—ã–π –¥–æ–∫—É–º–µ–Ω—Ç-–∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ")
        file = await update.message.document.get_file()
    else:
        logging.warning("‚ùå –ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –Ω–µ —Ä–∞—Å–ø–æ–∑–Ω–∞–Ω–æ")
        await update.message.reply_text("‚ùå –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø—Ä–∏–∫—Ä–µ–ø–∏—Ç–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –∫–∞–∫ —Ñ–æ—Ç–æ –∏–ª–∏ –∫–∞–∫ —Ñ–∞–π–ª.")
        return IMAGE_UPLOAD

    os.makedirs("images", exist_ok=True)
    path = f"images/{context.user_data['weapon'].replace(' ', '_')}.jpg"
    await file.download_to_drive(path)
    context.user_data['image'] = path

    logging.info(f"‚úÖ –ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–æ: {path}")
    logging.info("‚è≥ –û–∂–∏–¥–∞–Ω–∏–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è...")

    await update.message.reply_text(
        "‚úÖ –ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –ø–æ–ª—É—á–µ–Ω–æ.\n\n–ù–∞–∂–º–∏—Ç–µ ¬´–ó–∞–≤–µ—Ä—à–∏—Ç—å¬ª, —á—Ç–æ–±—ã —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å —Å–±–æ—Ä–∫—É, –∏–ª–∏ ¬´–û—Ç–º–µ–Ω–∞¬ª, —á—Ç–æ–±—ã –ø—Ä–µ—Ä–≤–∞—Ç—å.",
        reply_markup=ReplyKeyboardMarkup([["–ó–∞–≤–µ—Ä—à–∏—Ç—å", "–û—Ç–º–µ–Ω–∞"]], resize_keyboard=True)
    )
    return CONFIRMATION



# –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –ø–æ–ª–Ω–æ–π —Å–±–æ—Ä–∫–∏ –≤ JSON
async def confirm_build(update: Update, context: ContextTypes.DEFAULT_TYPE):
    new_build = {
        "weapon_name": context.user_data['weapon'],
        "role": context.user_data.get('role', ''),
        "category": context.user_data.get("category", "–ú–µ—Ç–∞"),
        "mode": context.user_data['mode'],
        "type": context.user_data['type'],
        "modules": context.user_data['detailed_modules'],
        "image": context.user_data['image'],
        "author": update.effective_user.full_name
    }

    os.makedirs(os.path.dirname(DB_PATH), exist_ok=True)
    if os.path.exists(DB_PATH):
        with open(DB_PATH, 'r') as f:
            data = json.load(f)
    else:
        data = []
    data.append(new_build)
    with open(DB_PATH, 'w') as f:
        json.dump(data, f, indent=2)

    # –ù–æ–≤–∞—è –∫–ª–∞–≤–∏–∞—Ç—É—Ä–∞ —Å –≤–∞—Ä–∏–∞–Ω—Ç–∞–º–∏
    keyboard = [
        ["‚ûï –î–æ–±–∞–≤–∏—Ç—å –µ—â—ë –æ–¥–Ω—É —Å–±–æ—Ä–∫—É"],
        ["‚óÄ –û—Ç–º–µ–Ω–∞"]
    ]
    reply_markup = ReplyKeyboardMarkup(keyboard, resize_keyboard=True)

    await update.message.reply_text(
        "‚úÖ –°–±–æ—Ä–∫–∞ —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω–∞!\n\n–ß—Ç–æ —Ö–æ—Ç–∏—Ç–µ —Å–¥–µ–ª–∞—Ç—å –¥–∞–ª—å—à–µ?",
        reply_markup=reply_markup
    )

    return POST_CONFIRM

# === –ö–æ–º–∞–Ω–¥–∞ /help ===
async def help_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text(
    "üí¨ –ï—Å–ª–∏ —É –≤–∞—Å –≤–æ–∑–Ω–∏–∫–ª–∏ –≤–æ–ø—Ä–æ—Å—ã, –ø—Ä–æ–±–ª–µ–º—ã –≤ —Ä–∞–±–æ—Ç–µ –±–æ—Ç–∞ –∏–ª–∏ –µ—Å—Ç—å –∏–¥–µ–∏ –ø–æ —É–ª—É—á—à–µ–Ω–∏—é ‚Äî –Ω–µ —Å—Ç–µ—Å–Ω—è–π—Ç–µ—Å—å, –ø–∏—à–∏—Ç–µ –ø—Ä—è–º–æ –º–Ω–µ: @nd_admin95\n\n"
    "–Ø –≤—Å–µ–≥–¥–∞ –Ω–∞ —Å–≤—è–∑–∏ –∏ —Å—Ç–∞—Ä–∞—é—Å—å —Å–¥–µ–ª–∞—Ç—å –±–æ—Ç–∞ –µ—â—ë –ª—É—á—à–µ –¥–ª—è –≤–∞—Å!"
)

# === /log ===
async def get_logs(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user = update.effective_user
    if user.id not in ALLOWED_USERS:
        await update.message.reply_text("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –ª–æ–≥–æ–≤.")
        return

    try:
        result = subprocess.run(
            ["journalctl", "-u", "ndsborki.service", "-n", "30", "--no-pager"],
            stdout=subprocess.PIPE,
            stderr=subprocess.PIPE,
            text=True
        )
        logs = result.stdout.strip() or result.stderr.strip()
        if not logs:
            logs = "‚ö†Ô∏è –õ–æ–≥–∏ –ø—É—Å—Ç—ã –∏–ª–∏ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω—ã."

        await context.bot.send_message(
            chat_id=ADMIN_ID,
            text=f"üìÑ <b>–ü–æ—Å–ª–µ–¥–Ω–∏–µ 30 —Å—Ç—Ä–æ–∫ –ª–æ–≥–∞:</b>\n<pre>{logs}</pre>",
            parse_mode="HTML"
        )

        await update.message.reply_text("üì§ –õ–æ–≥–∏ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω—ã –≤ –∞–¥–º–∏–Ω—Å–∫–∏–π –∫–∞–Ω–∞–ª.")
    except Exception as e:
        await update.message.reply_text("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –ª–æ–≥–∏.")
        logging.exception("–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –ª–æ–≥–æ–≤")




# === –ö–æ–º–∞–Ω–¥–∞ /–°—Ç–∞—Ç—É—Å –¥–ª—è –∞–¥–º–∏–Ω–æ–≤ ===   

async def status_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if update.effective_user.id not in ALLOWED_USERS:
        await update.message.reply_text("‚õî –£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥–µ.")
        return

    if not os.path.exists(DB_PATH):
        await update.message.reply_text("‚ùå –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç.")
        return

    try:
        with open(DB_PATH, "r", encoding="utf-8") as f:
            data = json.load(f)
    except Exception as e:
        await update.message.reply_text(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —á—Ç–µ–Ω–∏–∏ –ë–î: {e}")
        return

    # –°—Ç–∞—Ç—É—Å systemd
    try:
        result = subprocess.run(["systemctl", "is-active", "ndsborki.service"], capture_output=True, text=True)
        service_status = result.stdout.strip()
    except Exception as e:
        service_status = f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ systemd: {e}"

    total = len(data)
    formatted_time = datetime.fromtimestamp(os.path.getmtime(DB_PATH)).strftime("%d.%m.%Y %H:%M")

    authors = Counter(b.get("author", "‚Äî") for b in data)
    categories = Counter(b.get("category", "‚Äî") for b in data)

    msg = [
        f"üñ• <b>–°–æ—Å—Ç–æ—è–Ω–∏–µ —Å–µ—Ä–≤–∏—Å–∞:</b> <code>{service_status}</code>",
        f"üì¶ <b>–í—Å–µ–≥–æ —Å–±–æ—Ä–æ–∫:</b> <code>{total}</code>",
        f"üìÖ <b>–û–±–Ω–æ–≤–ª–µ–Ω–æ:</b> <code>{formatted_time}</code>",
        "",
        "üë• <b>–ê–≤—Ç–æ—Ä—ã:</b>"
    ]
    msg += [f"‚Ä¢ <b>{name}</b> ‚Äî <code>{count}</code>" for name, count in authors.most_common()]

    if categories:
        msg.append("\nüìÅ <b>–ö–∞—Ç–µ–≥–æ—Ä–∏–∏ —Å–±–æ—Ä–æ–∫:</b>")
        msg += [f"‚Ä¢ <b>{cat}</b> ‚Äî <code>{count}</code>" for cat, count in categories.items()]

    await update.message.reply_text("\n".join(msg), parse_mode="HTML")

# === –ö–æ–º–∞–Ω–¥–∞ /home ‚Äî –≤–æ–∑–≤—Ä–∞—Ç –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é ===
async def home_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text("üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é...")
    await start(update, context)



# === –ö–æ–º–∞–Ω–¥–∞ /show_all ‚Äî —Å–ø–∏—Å–æ–∫ –≤—Å–µ—Ö —Å–±–æ—Ä–æ–∫ —Ç–µ–∫—Å—Ç–æ–º ===
async def show_all_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if not os.path.exists(DB_PATH):
        await update.message.reply_text("–°–ø–∏—Å–æ–∫ —Å–±–æ—Ä–æ–∫ –ø—É—Å—Ç.")
        return

    with open(DB_PATH, 'r') as f:
        data = json.load(f)

    # ‚úÖ –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ç–æ–ª—å–∫–æ Warzone
    data = [b for b in data if b.get("mode", "").lower() == "warzone"]

    if not data:
        await update.message.reply_text("–°–ø–∏—Å–æ–∫ —Å–±–æ—Ä–æ–∫ –ø—É—Å—Ç.")
        return

    lines = ["üìÑ <b>–°–±–æ—Ä–∫–∏ Warzone:</b>"]
    for idx, b in enumerate(data, start=1):
        translation = load_translation_dict(b.get("type", ""))  # ‚úÖ –∑–∞–≥—Ä—É–∑–∫–∞ –ø–µ—Ä–µ–≤–æ–¥–∞
        modules_text = "\n".join(
            f"üî∏ {k}: {translation.get(v, v)}" for k, v in b.get("modules", {}).items()
        )

        lines.append(
            f"<b>{idx}. {b.get('weapon_name', '‚Äî').upper()}</b>\n"
            f"‚îú –î–∏—Å—Ç–∞–Ω—Ü–∏—è: {b.get('role', '-')}\n"
            f"‚îú –¢–∏–ø: {b.get('type', '-')}\n"
            f"‚îú –ú–æ–¥—É–ª–µ–π: {len(b.get('modules', {}))}\n"
            f"‚îî –ê–≤—Ç–æ—Ä: {b.get('author', '-')}"
        )

    result = "\n\n".join(lines)
    markup = ReplyKeyboardMarkup([['üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é']], resize_keyboard=True)
    await update.message.reply_text(result, reply_markup=markup, parse_mode="HTML")


# –û—Ç–º–µ–Ω–∞ –¥–µ–π—Å—Ç–≤–∏—è –∏ —Å–±—Ä–æ—Å –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã
async def cancel(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text("‚ùå –î–µ–π—Å—Ç–≤–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ.", reply_markup=ReplyKeyboardRemove())
    return ConversationHandler.END

# === /restart ===
@admin_only
async def restart_bot(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user = update.effective_user

    context.user_data.clear()
    await update.message.reply_text(
        "üîÑ –ë–æ—Ç –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫–∞–µ—Ç—Å—è...\n‚è≥ –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–¥–æ–∂–¥–∏—Ç–µ –ø–∞—Ä—É —Å–µ–∫—É–Ω–¥..."
    )

    # –î–ª—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –≤ –ª–æ–≥-–∫–∞–Ω–∞–ª
    with open("restarted_by.txt", "w") as f:
        f.write(f"{user.full_name} (ID: {user.id})")

    # –î–ª—è –ª–∏—á–Ω–æ–≥–æ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –ø–æ—Å–ª–µ –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫–∞
    with open("restart_message.txt", "w") as f:
        f.write(str(user.id))

    os._exit(0)







    # üí£ –ó–∞–≤–µ—Ä—à–∞–µ–º –ø—Ä–æ—Ü–µ—Å—Å ‚Äî systemd —Å–∞–º –ø–µ—Ä–µ–∑–∞–ø—É—Å—Ç–∏—Ç
    os._exit(0)



# –í—ã–±–æ—Ä –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –≤ –ø–æ–ª—å–∑–æ–≤ —á–∞—Å—Ç–∏
async def view_category_select(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if not os.path.exists(DB_PATH):
        await update.message.reply_text("‚ö†Ô∏è –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.")
        return ConversationHandler.END

    with open(DB_PATH, 'r', encoding='utf-8') as f:
        data = json.load(f)

    # –ù–∞–∑–≤–∞–Ω–∏—è –∫–∞—Ç–µ–≥–æ—Ä–∏–π –∏ —ç–º–æ–¥–∑–∏
    raw_categories = {
        "–¢–æ–ø–æ–≤–∞—è –º–µ—Ç–∞": "üî• –¢–æ–ø–æ–≤–∞—è –º–µ—Ç–∞",
        "–ú–µ—Ç–∞": "üìà –ú–µ—Ç–∞",
        "–ù–æ–≤–∏–Ω–∫–∏": "üÜï –ù–æ–≤–∏–Ω–∫–∏"
    }

    # –ü–æ–¥—Å—á—ë—Ç –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ —Å–±–æ—Ä–æ–∫ –Ω–∞ –∫–∞–∂–¥—É—é –∫–∞—Ç–µ–≥–æ—Ä–∏—é
    counts = {
        cat: sum(1 for b in data if b.get("mode", "").lower() == "warzone" and b.get("category") == cat)
        for cat in raw_categories
    }

    # –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
    user_input = update.message.text.strip()
    for key, label in raw_categories.items():
        if user_input.startswith(label):
            context.user_data['selected_category'] = key
            types = sorted(set(
                b['type'] for b in data
                if b.get("mode", "").lower() == "warzone" and b.get("category") == key
            ))
            buttons = [[t] for t in types]
            await update.message.reply_text("–í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø –æ—Ä—É–∂–∏—è:", reply_markup=ReplyKeyboardMarkup(buttons, resize_keyboard=True))
            return VIEW_WEAPON

    # –ü–µ—Ä–≤—ã–π –∑–∞–ø—É—Å–∫ ‚Äî –≤—ã–≤–æ–¥ –∫–∞—Ç–µ–≥–æ—Ä–∏–π —Å —ç–º–æ–¥–∑–∏ –∏ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ–º
    buttons = [[f"{label} ({counts[key]})"] for key, label in raw_categories.items()]
    await update.message.reply_text("–í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é:", reply_markup=ReplyKeyboardMarkup(buttons, resize_keyboard=True))
    return VIEW_CATEGORY_SELECT





# === –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è —Ö–µ–Ω–¥–ª–µ—Ä–æ–≤ ===
app = ApplicationBuilder().token(TOKEN).post_init(on_startup).build()


app.add_handler(CommandHandler("start", start))
app.add_handler(CommandHandler("restart", restart_bot))
app.add_handler(CommandHandler("help", help_command))
app.add_handler(CommandHandler("show_all", show_all_command))
app.add_handler(CommandHandler("status", status_command))
app.add_handler(CommandHandler("log", get_logs))
app.add_handler(CommandHandler("check_files", check_files))



add_conv = ConversationHandler(
    entry_points=[
        MessageHandler(filters.Regex("‚ûï –î–æ–±–∞–≤–∏—Ç—å —Å–±–æ—Ä–∫—É"), add_start),
        CommandHandler("add", add_start),
    ],
    states={
        WEAPON_NAME: [MessageHandler(filters.TEXT & ~filters.COMMAND, get_weapon_name)],
        ROLE_INPUT: [MessageHandler(filters.TEXT & ~filters.COMMAND, get_weapon_role)],
        CATEGORY_SELECT: [MessageHandler(filters.TEXT & ~filters.COMMAND, get_category)],  # ‚¨Ö –í–ï–†–•
        MODE_SELECT: [MessageHandler(filters.TEXT & ~filters.COMMAND, get_mode)],
        TYPE_CHOICE: [MessageHandler(filters.TEXT & ~filters.COMMAND, get_type)],
        MODULE_COUNT: [MessageHandler(filters.TEXT & ~filters.COMMAND, get_module_count)],
        MODULE_SELECT: [
            MessageHandler(filters.TEXT & ~filters.COMMAND, select_modules),
            MessageHandler(filters.PHOTO | filters.Document.IMAGE, reject_early_image),
            CallbackQueryHandler(module_variant_callback),
        ],
        IMAGE_UPLOAD: [MessageHandler(filters.PHOTO | filters.Document.IMAGE, handle_image)],
        CONFIRMATION: [
            MessageHandler(filters.TEXT & filters.Regex("^–ó–∞–≤–µ—Ä—à–∏—Ç—å$"), confirm_build),
            MessageHandler(filters.Regex("–û—Ç–º–µ–Ω–∞"), cancel),
            MessageHandler(filters.ALL & ~filters.COMMAND, lambda u, c: u.message.reply_text(
                "üìç –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –Ω–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É ¬´–ó–∞–≤–µ—Ä—à–∏—Ç—å¬ª, —á—Ç–æ–±—ã —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å —Å–±–æ—Ä–∫—É, –∏–ª–∏ ¬´–û—Ç–º–µ–Ω–∞¬ª, —á—Ç–æ–±—ã –≤—ã–π—Ç–∏.")
            )
        ],
        POST_CONFIRM: [
            MessageHandler(filters.Regex("‚ûï –î–æ–±–∞–≤–∏—Ç—å –µ—â—ë –æ–¥–Ω—É —Å–±–æ—Ä–∫—É"), add_start),
            MessageHandler(filters.Regex("‚óÄ –û—Ç–º–µ–Ω–∞"), start)
        ],
    },
    fallbacks=[
        CommandHandler("cancel", cancel),
        MessageHandler(filters.Regex("^/cancel$"), cancel),
        CommandHandler("home", home_command),
    ]
)

app.add_handler(add_conv)



# =======================================================================================


view_conv = ConversationHandler(
    entry_points=[MessageHandler(filters.Regex("üìã –°–±–æ—Ä–∫–∏ Warzone"), view_category_select)],
    states={
        VIEW_CATEGORY_SELECT: [
            MessageHandler(filters.TEXT & ~filters.COMMAND, view_select_weapon),
            MessageHandler(filters.TEXT & ~filters.COMMAND, show_all_builds),
        ],
        VIEW_WEAPON: [MessageHandler(filters.TEXT & ~filters.COMMAND, view_select_weapon)],
        VIEW_SET_COUNT: [MessageHandler(filters.TEXT & ~filters.COMMAND, view_set_count)],
        VIEW_DISPLAY: [
            MessageHandler(filters.Regex("5|8"), view_display_builds),
            MessageHandler(filters.Regex("‚û° –°–ª–µ–¥—É—é—â–∞—è"), next_build),
            MessageHandler(filters.Regex("‚¨Ö –ü—Ä–µ–¥—ã–¥—É—â–∞—è"), previous_build),
            MessageHandler(filters.Regex("üìã –°–±–æ—Ä–∫–∏ Warzone"), show_all_builds),
            MessageHandler(filters.Regex("‚óÄ –ù–∞–∑–∞–¥"), view_set_count),
        ]
    },
    fallbacks=[
        CommandHandler("home", home_command),
        MessageHandler(filters.Regex("–û—Ç–º–µ–Ω–∞"), cancel),
    ]
    
)

app.add_handler(view_conv)

# ‚¨áÔ∏è –û—Ç–¥–µ–ª—å–Ω–æ –≤–Ω–µ –≤—Å–µ—Ö handlers ‚Äî –ø—Ä–æ—Å—Ç–æ –∫–∞–∫ –æ–±—ã—á–Ω—É—é –∫–æ–º–∞–Ω–¥—É
app.add_handler(CommandHandler("home", home_command))


# =========================================================================================

# === –£–ø—Ä–æ—â—ë–Ω–Ω—ã–π —Ä–µ–∂–∏–º —É–¥–∞–ª–µ–Ω–∏—è —Å–±–æ—Ä–æ–∫ –ø–æ ID ===
DELETE_ENTER_ID, DELETE_CONFIRM_SIMPLE = range(130, 132)


# –ó–∞–ø—É—Å–∫ —É–¥–∞–ª–µ–Ω–∏—è ‚Äî –≤—ã–≤–æ–¥ —Å–ø–∏—Å–∫–∞ —Å ID
async def delete_start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if update.effective_user.id not in ALLOWED_USERS:
        await update.message.reply_text("‚õî –£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥–µ.")
        return ConversationHandler.END

    if not os.path.exists(DB_PATH):
        await update.message.reply_text("‚ùå –ë–∞–∑–∞ —Å–±–æ—Ä–æ–∫ –ø—É—Å—Ç–∞.")
        return ConversationHandler.END

    with open(DB_PATH, 'r') as f:
        data = json.load(f)

    if not data:
        await update.message.reply_text("‚ùå –ù–µ—Ç —Å–±–æ—Ä–æ–∫ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è.")
        return ConversationHandler.END

    context.user_data['delete_map'] = {}
    text_lines = ["üßæ –°–±–æ—Ä–∫–∏ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è:"]

    for idx, b in enumerate(data, start=1):
        context.user_data['delete_map'][str(idx)] = b
        translation = load_translation_dict(b.get("type", ""))
        modules = "\n".join(f"üî∏ {k}: {translation.get(v, v)}" for k, v in b.get("modules", {}).items())
        text_lines.append(
        f"{b['weapon_name']} (ID {idx})\n–¢–∏–ø: {b['type']}\n\n–ú–æ–¥—É–ª–µ–π: {len(b['modules'])}\n{modules}\n\n–ê–≤—Ç–æ—Ä: {b['author']}"
    )

    message = "\n\n".join(text_lines)
    keyboard = InlineKeyboardMarkup.from_button(InlineKeyboardButton("üö™ –í—ã–π—Ç–∏ –∏–∑ —É–¥–∞–ª–µ–Ω–∏—è", callback_data="stop_delete"))

    await update.message.reply_text(
        message + "\n\n–í–≤–µ–¥–∏—Ç–µ ID —Å–±–æ—Ä–∫–∏ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è (–Ω–∞–ø—Ä–∏–º–µ—Ä: 1)",
        parse_mode="HTML",
        reply_markup=keyboard
    )
    return DELETE_ENTER_ID

# Callback-–∫–Ω–æ–ø–∫–∞ –¥–ª—è –≤—ã—Ö–æ–¥–∞
async def stop_delete_callback(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.callback_query.answer()
    await update.callback_query.message.edit_text("üö´ –í—ã –≤—ã—à–ª–∏ –∏–∑ —Ä–µ–∂–∏–º–∞ —É–¥–∞–ª–µ–Ω–∏—è.")
    return ConversationHandler.END

# –í–≤–æ–¥ ID –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è
async def delete_enter_id(update: Update, context: ContextTypes.DEFAULT_TYPE):
    build_id = update.message.text.strip()
    if build_id not in context.user_data.get('delete_map', {}):
        await update.message.reply_text("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π ID. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.")
        return DELETE_ENTER_ID

    context.user_data['delete_id'] = build_id
    b = context.user_data['delete_map'][build_id]

    await update.message.reply_text(
        f"‚ùó –í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ —É–¥–∞–ª–∏—Ç—å —Å–±–æ—Ä–∫—É {b['weapon_name']} (ID: {build_id})?",
        reply_markup=ReplyKeyboardMarkup([["–î–∞"], ["–û—Ç–º–µ–Ω–∞"]], resize_keyboard=True)
    )
    return DELETE_CONFIRM_SIMPLE

# –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ —É–¥–∞–ª–µ–Ω–∏—è
async def delete_confirm_simple(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if update.message.text == "–û—Ç–º–µ–Ω–∞":
        await update.message.reply_text("‚ùå –û—Ç–º–µ–Ω–µ–Ω–æ.")
        return await delete_start(update, context)

    build_id = context.user_data.get('delete_id')
    if not build_id or build_id not in context.user_data.get('delete_map', {}):
        await update.message.reply_text("‚ùå –û—à–∏–±–∫–∞ ID. –í–æ–∑–≤—Ä–∞—Ç –∫ —Å–ø–∏—Å–∫—É.")
        return await delete_start(update, context)

    to_delete = context.user_data['delete_map'][build_id]
    with open(DB_PATH, 'r') as f:
        data = json.load(f)

    new_data = [b for b in data if b != to_delete]
    with open(DB_PATH, 'w') as f:
        json.dump(new_data, f, indent=2)

    await update.message.reply_text("‚úÖ –°–±–æ—Ä–∫–∞ —É–¥–∞–ª–µ–Ω–∞.")
    return await delete_start(update, context)

# Handler
simple_delete_conv = ConversationHandler(
    entry_points=[CommandHandler("delete", delete_start)],
    states={
        DELETE_ENTER_ID: [
            MessageHandler(filters.TEXT & ~filters.COMMAND, delete_enter_id),
        ],
        DELETE_CONFIRM_SIMPLE: [MessageHandler(filters.TEXT & ~filters.COMMAND, delete_confirm_simple)],
    },
    fallbacks=[
        CommandHandler("home", home_command),
        MessageHandler(filters.Regex("–û—Ç–º–µ–Ω–∞"), cancel), 
    ]
)
app.add_handler(simple_delete_conv)



# –æ—Ç–¥–µ–ª—å–Ω–æ –∑–∞ –ø—Ä–µ–¥–µ–ª–∞–º–∏ ConversationHandler
app.add_handler(CallbackQueryHandler(stop_delete_callback, pattern="^stop_delete$"))

# –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–Ω–æ–ø–∫–∏ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
app.add_handler(MessageHandler(filters.Regex("üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é"), start))

# ==================== –ö–û–ù–ï–¶ —É–¥–∞–ª–µ–Ω–∏—è —Å–±–æ—Ä–∫–∏ ===================================== 


# === –ó–∞–≥—Ä—É–∑–∫–∞ –ø–µ—Ä–µ–≤–æ–¥–æ–≤ –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è —Å–±–æ—Ä–æ–∫ ===
def load_translation_dict(weapon_key):
    file_map = {
        "assault": "modules-assault.json",
        "smg": "modules-pp.json",
        "shotgun": "modules-drobovik.json",
        "marksman": "modules-pehotnay.json",
        "lmg": "modules-pulemet.json",
        "sniper": "modules-snayperki.json",
        # –î–æ–±–∞–≤—å –æ—Å—Ç–∞–ª—å–Ω—ã–µ –ø—Ä–∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏
    }

    filename = file_map.get(weapon_key)
    if not filename:
        return {}

    with open(f"database/{filename}", "r", encoding="utf-8") as f:
        raw_data = json.load(f)

    return {v['en']: v['ru'] for variants in raw_data.values() for v in variants}




app.run_polling()
